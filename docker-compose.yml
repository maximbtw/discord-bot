services:
  bot:
    container_name: bot
    build:
      context: .
      dockerfile: bot/Bot.Host/Dockerfile
    environment:
      - DOTNET_ENVIRONMENT=Production
      # Discord bot
      - BotConfiguration__Token=${DISCORD_TOKEN}
      - BotConfiguration__Prefix=/
      # Database
      - BotConfiguration__DatabaseOptions__ConnectionString=Host=db;Port=5432;Database=discord-prod;Username=${POSTGRES_USER};Password=${POSTGRES_PASSWORD}
      # AI Chat
      - BotConfiguration__AiChatOptions__Strategy=OpenRouter
      - BotConfiguration__AiChatOptions__OpenRouterSettings__ApiKey=${OPENROUTER_API_KEY}
      - BotConfiguration__AiChatOptions__OpenRouterSettings__Model=meta-llama/llama-3.3-70b-instruct:free
      - BotConfiguration__AiChatOptions__OpenRouterSettings__SystemMessage=–¢—ã —á–∞—Ç –±–æ—Ç –≤ –¥–∏—Å–∫–æ—Ä–¥–µ, –ø—ã—Ç–∞–π—Å—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
      - BotConfiguration__AiChatOptions__OpenRouterSettings__BadRequestMessage=–ú–Ω–µ –ø–æ–∫–∞ –Ω–µ—á–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å üòï
      - BotConfiguration__AiChatOptions__OpenRouterSettings__MaxChatHistoryMessages=20
      - BotConfiguration__AiChatOptions__OpenRouterSettings__MaxMessageLength=200
      - BotConfiguration__AiChatOptions__OpenRouterSettings__TimeOutInSeconds=20
      - BotConfiguration__AiChatOptions__OpenRouterSettings__RandomMessageChance=10
    depends_on:
      - db

  db:
    image: postgres:16
    container_name: db
    restart: always
    ports:
      - "1055:5432"
    environment:
      - POSTGRES_DB=discord-prod
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER}" ]
      interval: 30s
      timeout: 10s
      retries: 5
    volumes:
      - db-data:/var/lib/postgresql/data

volumes:
  db-data: